#ifndef LIGHTING
#define LIGHTING

#include "shadows.cg"

layout(std140) struct DirectionalLight
{
    vec3 DirectionWS;
    vec3 Intensity;
};

layout(std140) struct PointLight
{
    vec3 PositionWS;
    vec3 Intensity;
    float Attenuation;
};

layout(std140) struct SpotLight
{
    vec3 PositionWS;
    vec3 DirectionWS;
    vec3 Intensity;
    float Attenuation;
    float CutOffCos;
};

layout(std140) uniform Lighting
{
    vec3 _AmbientLight;

    DirectionalLight _DirectionalLight;
    bool _HasDirectionalLight;

    PointLight _PointLights[MAX_POINT_LIGHT_SOURCES];
    int _PointLightsCount;

    SpotLight _SpotLights[MAX_SPOT_LIGHT_SOURCES];
    int _SpotLightsCount;
};

struct LightData
{
    vec3 Light;
    vec3 Specular;
};

vec4 sampleSpecular(vec2 uv)
{
    #if defined(_SPECULAR) && defined(FRAGMENT_PROGRAM)
    return texture(_SpecularMask, uv);
    #else
    return vec4(0);
    #endif
}

vec3 sampleReflection(vec3 normalWS, vec3 posWS, vec2 uv)
{
    #if defined(_REFLECTION) && defined(FRAGMENT_PROGRAM)
    vec3 viewDirWS = normalize(posWS - _CameraPosWS);
    vec3 reflectedViewWS = reflect(viewDirWS, normalWS);
    vec4 reflection = texture(_ReflectionMask, uv);
    float reflStrength = _ReflectionStrength * reflection.a;
    return texture(_ReflectionCube, reflectedViewWS).rgb * reflection.rgb * reflStrength;
    #else
    return vec3(0);
    #endif
}

vec3 getSpecularTerm(vec4 specular, vec3 lightDirWS, vec3 viewDirWS, vec3 normalWS){
    #if defined(_SPECULAR) && defined(FRAGMENT_PROGRAM)
    vec3 halfAngle = normalize(lightDirWS + viewDirWS);
    float blinnTerm = clamp(dot(normalWS, halfAngle), 0, 1);
    blinnTerm = pow(blinnTerm, _Smoothness) * specular.a * _SpecularStrength;
    return specular.rgb * max(blinnTerm, 0);
    #else
    return vec3(0);
    #endif
}

vec3 getNormalWS(vec3 normalWS, vec3 tangentWS, vec2 uv)
{
    normalWS = normalize(normalWS);
    #if defined(_NORMAL_MAP) && defined(FRAGMENT_PROGRAM)
    tangentWS = normalize(tangentWS);
    // Gramm-Schmidt process to ensure that tangent and normal are still orthogonal after interpolation
    tangentWS = normalize(tangentWS - dot(tangentWS, normalWS) * normalWS);
    vec3 bitangentWS = cross(normalWS, tangentWS);
    vec3 normalTS = texture(_NormalMap, uv * _NormalMap_ST.zw + _NormalMap_ST.xy).rgb;
    normalTS = normalize(normalTS * 2.0 - 1.0);
    mat3 TBN = mat3(tangentWS, bitangentWS, normalWS);
    normalWS = normalize(TBN * normalTS);
    #endif
    return normalWS;
}

LightData getLight(vec3 posWS, vec3 normalWS, vec4 specular)
{
    LightData data;
    data.Light = _AmbientLight;
    data.Specular = vec3(0);

    vec3 viewDirWS = normalize(_CameraPosWS - posWS);

    if (_HasDirectionalLight){
        vec3 lightDirWS = normalize(-_DirectionalLight.DirectionWS);
        float lightAngleCos = clamp(dot(normalWS, lightDirWS), 0, 1);
        float shadowTerm = getDirLightShadowTerm(posWS, lightAngleCos);

        data.Light += _DirectionalLight.Intensity * lightAngleCos * shadowTerm;
        data.Specular += getSpecularTerm(specular, lightDirWS, viewDirWS, normalWS);
    }

    for (int i = 0; i < _PointLightsCount; ++i)
    {
        vec3 lightDirWS = normalize(_PointLights[i].PositionWS - posWS);
        float lightAngleCos = clamp(dot(normalWS, lightDirWS), 0, 1);
        float distance = distance(_PointLights[i].PositionWS, posWS);
        float attenuationTerm = 1 / (1 + _PointLights[i].Attenuation * distance * distance);

        data.Light += _PointLights[i].Intensity * lightAngleCos * attenuationTerm;
        data.Specular += getSpecularTerm(specular, lightDirWS, viewDirWS, normalWS) * attenuationTerm;
    }

    for (int i = 0; i < _SpotLightsCount; ++i){
        vec3 lightDirWS = normalize(_SpotLights[i].PositionWS - posWS);
        float cutOffCos = clamp(dot(_SpotLights[i].DirectionWS, -lightDirWS), 0, 1);
        float lightAngleCos = clamp(dot(normalWS, lightDirWS), 0, 1);
        float distance = distance(_SpotLights[i].PositionWS, posWS);

        float attenuationTerm = 1 / (1 + _SpotLights[i].Attenuation * distance * distance);
        attenuationTerm *= clamp((cutOffCos - _SpotLights[i].CutOffCos) / (1 - _SpotLights[i].CutOffCos), 0, 1);
        attenuationTerm *= step(_SpotLights[i].CutOffCos, cutOffCos);

        float shadowTerm = getSpotLightShadowTerm(i, posWS, lightAngleCos);

        data.Light += _SpotLights[i].Intensity * lightAngleCos * attenuationTerm * shadowTerm;
        data.Specular += getSpecularTerm(specular, lightDirWS, viewDirWS, normalWS) * attenuationTerm;
    }

    return data;
}

#endif //LIGHTING
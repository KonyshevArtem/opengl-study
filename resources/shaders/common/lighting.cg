#ifndef LIGHTING
#define LIGHTING

#include "shadows.cg"

const float PI = 3.14159265359;


/// Data ///

struct PointLight
{
    vec3 PositionWS;
    vec3 Intensity;
    float Attenuation;
};

struct SpotLight
{
    vec3 PositionWS;
    vec3 DirectionWS;
    float Attenuation;
    vec3 Intensity;
    float CutOffCos;
};

layout(std140) uniform Lighting
{
    vec3 _AmbientLight;
    int _PointLightsCount;

    vec3 _DirLightDirectionWS;
    float _HasDirectionalLight;
    vec3 _DirLightIntensity;

    int _SpotLightsCount;

    PointLight _PointLights[MAX_POINT_LIGHT_SOURCES];
    SpotLight _SpotLights[MAX_SPOT_LIGHT_SOURCES];
};



/// Helpers ///

vec3 sampleReflection(vec3 normalWS, vec3 posWS, float roughness)
{
    #if defined(_REFLECTION)
    vec3 viewDirWS = normalize(posWS - _CameraPosWS);
    vec3 reflectedViewWS = reflect(viewDirWS, normalWS);
    return textureLod(_ReflectionCube, reflectedViewWS, roughness * _ReflectionCubeLevels).rgb;
    #else
    return vec3(0);
    #endif
}

vec3 unpackNormal(vec3 normalTS, vec3 normalWS, vec3 tangentWS, float normalIntensity)
{
    normalWS = normalize(normalWS);
    tangentWS = normalize(tangentWS);
    // Gramm-Schmidt process to ensure that tangent and normal are still orthogonal after interpolation
    tangentWS = normalize(tangentWS - dot(tangentWS, normalWS) * normalWS);
    vec3 bitangentWS = cross(tangentWS, normalWS);

    normalTS = normalTS * 2.0 - 1.0;
    normalTS *= vec3(normalIntensity, normalIntensity, 1);
    normalTS = normalize(normalTS);
    mat3 TBN = mat3(tangentWS, bitangentWS, normalWS);
    normalWS = normalize(TBN * normalTS);
    return normalWS;
}


/// Blinn-Phong ///


vec3 getSpecularTermBlinnPhong(vec4 specular, float smoothness, vec3 lightDirWS, vec3 viewDirWS, vec3 normalWS){
    #if defined(_SPECULAR)
    vec3 halfAngle = normalize(lightDirWS + viewDirWS);
    float blinnTerm = clamp(dot(normalWS, halfAngle), 0, 1);
    blinnTerm = pow(blinnTerm, smoothness) * specular.a;
    return specular.rgb * max(blinnTerm, 0);
    #else
    return vec3(0);
    #endif
}

vec3 getLightBlinnPhong(vec3 posWS, vec3 normalWS, vec3 albedo, vec4 specular, float roughness)
{
    vec3 viewDirWS = normalize(_CameraPosWS - posWS);
    float smoothness = 1 - roughness;

    vec3 directLighting = vec3(0);
    if (_HasDirectionalLight > 0){
        vec3 lightDirWS = normalize(-_DirLightDirectionWS);
        float lightAngleCos = clamp(dot(normalWS, lightDirWS), 0, 1);
        float shadowTerm = getDirLightShadowTerm(posWS, lightAngleCos);

        directLighting += albedo * _DirLightIntensity * lightAngleCos * shadowTerm;
        directLighting += getSpecularTermBlinnPhong(specular, smoothness, lightDirWS, viewDirWS, normalWS);
    }

    for (int i = 0; i < _PointLightsCount; ++i)
    {
        vec3 lightDirWS = normalize(_PointLights[i].PositionWS - posWS);
        float lightAngleCos = clamp(dot(normalWS, lightDirWS), 0, 1);
        float distance = distance(_PointLights[i].PositionWS, posWS);
        float attenuationTerm = 1 / (1 + _PointLights[i].Attenuation * distance * distance);

        directLighting += albedo * _PointLights[i].Intensity * lightAngleCos * attenuationTerm;
        directLighting += getSpecularTermBlinnPhong(specular, smoothness, lightDirWS, viewDirWS, normalWS) * attenuationTerm;
    }

    for (int i = 0; i < _SpotLightsCount; ++i){
        vec3 lightDirWS = normalize(_SpotLights[i].PositionWS - posWS);
        float cutOffCos = clamp(dot(_SpotLights[i].DirectionWS, -lightDirWS), 0, 1);
        float lightAngleCos = clamp(dot(normalWS, lightDirWS), 0, 1);
        float distance = distance(_SpotLights[i].PositionWS, posWS);

        float attenuationTerm = 1 / (1 + _SpotLights[i].Attenuation * distance * distance);
        attenuationTerm *= clamp((cutOffCos - _SpotLights[i].CutOffCos) / (1 - _SpotLights[i].CutOffCos), 0, 1);
        attenuationTerm *= step(_SpotLights[i].CutOffCos, cutOffCos);

        float shadowTerm = getSpotLightShadowTerm(i, posWS, lightAngleCos);

        directLighting += albedo * _SpotLights[i].Intensity * lightAngleCos * attenuationTerm * shadowTerm;
        directLighting += getSpecularTermBlinnPhong(specular, smoothness, lightDirWS, viewDirWS, normalWS) * attenuationTerm;
    }

    return _AmbientLight * albedo + directLighting;
}



/// PBR ///


float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a2 = roughness*roughness;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float nom = a2;
    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float k)
{
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return nom / denom;
}
  
float GeometrySmith(float NdotV, float NdotL, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);
	
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

void getLightSourcePBR(vec3 normalWS, vec3 viewDirWS, vec3 lightDirWS, float roughness, vec3 F0, float metallness, out vec3 diffuse, out vec3 specular)
{
    vec3 halfVector = normalize(lightDirWS + viewDirWS);

    float NdotV = max(dot(normalWS, viewDirWS), 0.0);
    float NdotL = max(dot(normalWS, lightDirWS), 0.0);
    
    float NDF = DistributionGGX(normalWS, halfVector, roughness);
    float G = GeometrySmith(NdotV, NdotL, roughness);
    vec3 F = fresnelSchlick(max(dot(halfVector, viewDirWS), 0), F0);
    
    vec3 numerator = NDF * G * F;
    float denominator = 4.0 * NdotV * NdotL;
    specular = numerator / max(denominator, 0.001);
    
    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metallness;
    diffuse = kD / PI;
}

vec3 getLightPBR(vec3 posWS, vec3 normalWS, vec3 albedo, float roughness, float metallness)
{
    vec3 viewDirWS = normalize(_CameraPosWS - posWS);
    vec3 F0 = mix(vec3(0.04), albedo, metallness);
    roughness =  clamp(roughness, 0.01, 1);

    vec3 diffuse;
    vec3 specular;
    vec3 directLighting = vec3(0);
    if (_HasDirectionalLight > 0){
        vec3 lightDirWS = normalize(-_DirLightDirectionWS);
        
        float NdotL = max(dot(normalWS, lightDirWS), 0.0);
        float shadowTerm = getDirLightShadowTerm(posWS, NdotL);
        vec3 radiance = _DirLightIntensity * NdotL * shadowTerm;

        getLightSourcePBR(normalWS, viewDirWS, lightDirWS, roughness, F0, metallness, diffuse, specular);
        directLighting += (albedo * diffuse + specular) * radiance;
    }

    for (int i = 0; i < _PointLightsCount; ++i)
    {
        vec3 lightDirWS = normalize(_PointLights[i].PositionWS - posWS);
        float NdotL = clamp(dot(normalWS, lightDirWS), 0, 1);
        float dist = distance(_PointLights[i].PositionWS, posWS);
        float attenuationTerm = 1 / (1 + _PointLights[i].Attenuation * dist * dist);

        float shadowTerm = getPointLightShadowTerm(i, posWS, NdotL);
        vec3 radiance = _PointLights[i].Intensity * NdotL * attenuationTerm * shadowTerm;

        getLightSourcePBR(normalWS, viewDirWS, lightDirWS, roughness, F0, metallness, diffuse, specular);
        directLighting += (albedo * diffuse + specular) * radiance;
    }
    
    for (int i = 0; i < _SpotLightsCount; ++i){
        vec3 lightDirWS = normalize(_SpotLights[i].PositionWS - posWS);
        float cutOffCos = clamp(dot(_SpotLights[i].DirectionWS, -lightDirWS), 0, 1);
        float NdotL = clamp(dot(normalWS, lightDirWS), 0, 1);
        float dist = distance(_SpotLights[i].PositionWS, posWS);
    
        float attenuationTerm = 1 / (1 + _SpotLights[i].Attenuation * dist * dist);
        attenuationTerm *= clamp((cutOffCos - _SpotLights[i].CutOffCos) / (1 - _SpotLights[i].CutOffCos), 0, 1);
        attenuationTerm *= step(_SpotLights[i].CutOffCos, cutOffCos);
    
        float shadowTerm = getSpotLightShadowTerm(i, posWS, NdotL);
        vec3 radiance = _SpotLights[i].Intensity * NdotL * attenuationTerm * shadowTerm;

        getLightSourcePBR(normalWS, viewDirWS, lightDirWS, roughness, F0, metallness, diffuse, specular);
        directLighting += (albedo * diffuse + specular) * radiance;
    }

    vec3 indirectLighting = _AmbientLight;
    vec3 reflectionIrradiance = sampleReflection(normalWS, posWS, roughness);
    indirectLighting += F0 * reflectionIrradiance;

    return albedo.rgb * indirectLighting + directLighting;
}

#endif //LIGHTING